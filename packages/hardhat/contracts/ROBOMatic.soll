// //SPDX-License-Identifier: MIT
// pragma solidity 0.8.12;

// import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
// import "@openzeppelin/contracts/utils/Strings.sol";
// import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
// import "base64-sol/base64.sol";

// contract ROBOMatic is ERC721Enumerable {
//     using Strings for uint256;
//     using Strings for uint160;
//     using Strings for uint16;

//     struct RobotProperties {
//         string headColor;
//         string handFootandBodyColor;
//         string armLegColor;
//         string eyeMouthColor;
//     }

//     /* ========== STATE VARIABLES ========== */

//     /* == constants and immutables == */
//     uint16 private constant MAX_SUPPLY = 1000;
//     address payable constant buildGuild =
//         payable(0xB91621B0106C542Faf1cFeB4c316FEc48096B129);
//     uint public constant PRICE = 0.001 ether;
//     AggregatorV3Interface public immutable i_priceFeed;

//     /* == states == */
//     uint16 private _tokenIds;
//     uint256 private lastPrice = 0;
//     mapping(uint16 => string[6]) public tokenIdToColor;
//     mapping(uint16 => uint256) public tokenIdToRandomNumber;
//     mapping(uint16 => bool) public isHappy;

//     /* ========== Functions ========== */
//     constructor(address _priceFeed) ERC721("ROBO Matic", "RBM") {
//         i_priceFeed = AggregatorV3Interface(_priceFeed);
//     }

//     function mintItem() public payable returns (uint256) {
//         require(_tokenIds <= MAX_SUPPLY, "DONE MINTING");
//         require(msg.value >= PRICE, "Price is 0.001 ETH");

//         _tokenIds = _tokenIds + 1;

//         uint16 id = _tokenIds;

//         _mint(msg.sender, id);

//         (
//             ,
//             /*uint80 roundID*/
//             int price,
//             ,
//             ,
//             /* uint startedAt */
//             /*uint timeStamp*/
//             uint80 answeredInRound
//         ) = i_priceFeed.latestRoundData();

//         if (uint256(price) > lastPrice) {
//             isHappy[id] = true;
//             lastPrice = uint256(price);
//         } else {
//             // by defalut its false
//             // isHappy[id] = false;
//             lastPrice = uint256(price);
//         }

//         string[6] memory COLORS = [
//            "#FF0000",
//             "#FFD700",
//             "#8FBC8F",
//             "#1E90FF",
//             "#C71585",
//             "#2B2A29"
//             ];

//         uint256 pseudoRandomNumber = uint256(
//             keccak256(
//                 abi.encodePacked(
//                     msg.sender,
//                     address(this),
//                     block.chainid,
//                     id,
//                     block.timestamp,
//                     block.difficulty,
//                     price
//                 )
//             )
//         );

//         // reorder the HUES randomly
//         for (uint256 i = 0; i < 6; i++) {
//             uint256 randomIndex = i +
//                 ((pseudoRandomNumber + answeredInRound) % (6 - i));
//             string memory color = COLORS[randomIndex];
//             COLORS[randomIndex] = COLORS[i];
//             COLORS[i] = color;
//         }

//         tokenIdToColor[id] = COLORS;
//         tokenIdToRandomNumber[id] = pseudoRandomNumber;
//         (bool success, ) = buildGuild.call{value: msg.value}("");
//         require(success, "Failed sending funds to BuildGuild");

//         return id;
//     }

//     function getPropertiesById(uint16 id)
//         public
//         view
//         returns (RobotProperties memory properties)
//     {
//         // 6 is length of COLORS array
//         uint256 pseudoRandomNumber = tokenIdToRandomNumber[id];
//         uint8 headIndex = uint8(pseudoRandomNumber % 6);
//         properties.headColor = tokenIdToColor[id][headIndex];

//         uint8 eyesMouthIndex = uint8((pseudoRandomNumber + 1) % 6);
//         properties.eyeMouthColor = tokenIdToColor[id][eyesMouthIndex];

//         properties.handFootandBodyColor = tokenIdToColor[id][4];

//         uint8 armLegIndex = uint8((pseudoRandomNumber + 4) % 6);

//         if (armLegIndex != 4) {
//             properties.armLegColor = tokenIdToColor[id][armLegIndex];
//         } else {
//             armLegIndex = uint8((pseudoRandomNumber + 5) % 7);
//             properties.armLegColor = tokenIdToColor[id][armLegIndex];
//         }

//         return properties;
//     }

//     function renderTokenById(uint16 id) public view returns (string memory) {
//         RobotProperties memory properties = getPropertiesById(id);
//         bool happy = isHappy[id];

//         string memory render;

//         if (happy) {
//             render =  render = string.concat(
//                 //Head
//                 "<path fill='"
//                 ,
//                 properties.headColor,"' d="
//                 '"M117 34l79 0c4,0 7,3 7,7l0 56c0,4 -3,7 -7,7l-28 0 0 5 -24 0 0 -5 -27 0c-4,0 -8,-3 -8,-7l0 -56c0,-4 4,-7 8,-7zm9 9l60 0c2,0 4,2 4,3l0 40c0,2 -2,3 -4,3l-60 0c-2,0 -3,-1 -3,-3l0 -40c0,-1 1,-3 3,-3z"'
//                 "/>",
//                 //Body
//                 "<path fill='",
//                 properties.handFootandBodyColor,
//                 "' d="
//                 '"M106 114l101 0c4,0 8,4 8,9l0 38 0 24 0 6c0,20 -16,36 -35,36l-47 0c-20,0 -36,-16 -36,-36l0 -6 0 -24 0 -38c0,-5 4,-9 9,-9zm8 17l84 0 0 58 -84 0 0 -58z"'
//                 "/>",
//                 //Hand and foot
//                 "<path fill='",
//                 properties.handFootandBodyColor,
//                 "' d="
//                 '"M122 301l21 0c2,0 3,2 3,5l0 18c-4,-3 -8,-5 -14,-5 -5,0 -10,2 -13,5l0 -18c0,-3 1,-5 3,-5zm129 -135l-22 0c-2,0 -3,4 -3,9l0 23 28 0 0 -23c0,-5 -2,-9 -3,-9zm-20 46l-5 0 0 9 5 0 0 -9zm23 0l-6 0 0 9 6 0 0 -9zm6 -12l-40 0 0 10 40 0 0 -10zm-199 -34l22 0c2,0 3,4 3,9l0 23 -28 0 0 -23c0,-5 2,-9 3,-9zm20 46l5 0 0 9 -5 0 0 -9zm-23 0l6 0 0 9 -6 0 0 -9zm-6 -12l40 0 0 10 -40 0 0 -10zm117 101l21 0c2,0 4,2 4,5l0 18c-4,-3 -9,-5 -14,-5 -5,0 -10,2 -14,5l0 -18c0,-3 2,-5 3,-5zm11 44l-21 0c0,-12 9,-23 21,-23 11,0 21,11 21,23l-21 0zm-48 0l-20 0c0,-12 9,-23 20,-23 12,0 21,11 21,23l-21 0z"'
//                 "/>",
//                 // Eye and Mouth
//                 "<g id="
//                 '"_2396601381632"'
//                 ">",
//                 "<circle  fill='"
//                ,properties.eyeMouthColor
//                 ,
//                 "' cx="
//                 '"138"'
//                 " cy="
//                 '"58"'
//                 " r="
//                 '"6"'
//                 "/>",
//                 "<circle   fill='"
//                ,properties.eyeMouthColor
//                 ,
//                 "' cx="
//                 '"174"'
//                 " cy="
//                 '"58"'
//                 " r="
//                 '"6"'
//                 "/>",
//                 "<path stroke-width="
//                 '"2.45086"'
//                 " fill="
//                 '"none"'
//                 "  stroke='"
//                ,properties.eyeMouthColor
//                 ,
//                 "' d="
//                 '"M142 73c3,6 8,10 14,10 6,0 12,-4 14,-10"'
//                 "/>",
//                 "</g>",
//                 //Arm and Leg
//                 "<path fill='"
//                 ,properties.armLegColor
//                 ,
//                 "' fill-rule="
//                 '"nonzero"'
//                 " d="
//                 '"M248 164l0 0c0,-19 -13,-35 -29,-35 0,6 0,0 0,18 8,0 14,8 14,17l0 0 15 0zm-125 66l19 0 0 67 -19 0 0 -67zm48 0l18 0 0 67 -18 0 0 -67zm-107 -66l0 0c0,-19 13,-35 29,-35 0,6 0,0 0,18 -8,0 -14,8 -14,17l0 0 -15 0z"'
//                 "/>",
//                 //Battery
//                 " <path fill="'"#CAD407"'" d="
//                 '"M114 146c14,9 26,6 42,0 13,-5 28,-1 42,0 0,7 0,14 0,22 0,7 0,14 0,21 -14,0 -28,0 -42,0 -14,0 -28,0 -42,0 0,-7 0,-14 0,-21 0,-8 0,-15 0,-22z"'
//                 "/>"
                
//                 );
//         } else {
//             render = string.concat(
//                 //Head
//                 "<path fill='"
//                 ,
//                 properties.headColor,"' d="
//                 '"M90 26l79 0c4,0 8,3 8,8l0 55c0,4 -4,8 -8,8l-27 0 0 5 -24 0 0 -5 -28 0c-4,0 -7,-4 -7,-8l0 -55c0,-5 3,-8 7,-8zm10 10l60 0c2,0 3,1 3,3l0 40c0,1 -1,3 -3,3l-60 0c-2,0 -4,-2 -4,-3l0 -40c0,-2 2,-3 4,-3z"'
//                 "/>",
//                 //Body
//                 "<path fill='"
//                 ,
//                 properties.handFootandBodyColor,"' d="
//                 '"M79 106l101 0c5,0 9,4 9,9l0 39 0 24 0 5c0,20 -16,36 -36,36l-47 0c-19,0 -35,-16 -35,-36l0 -5 0 -24 0 -39c0,-5 4,-9 8,-9zm9 18l84 0 0 58 -84 0 0 -58z"'
//                 "/>",
//                 //Hands And Foot
//                 " <path fill='"
//                 ,
//                 properties.handFootandBodyColor,"' d="
//                 '"M96 293l21 0c1,0 3,2 3,6l0 18c-4,-4 -9,-6 -14,-6 -5,0 -10,2 -14,6l0 -18c0,-4 2,-6 4,-6zm-61 -135l22 0c1,0 3,4 3,9l0 23 -28 0 0 -23c0,-5 1,-9 3,-9zm19 46l6 0 0 10 -6 0 0 -10zm-22 0l5 0 0 10 -5 0 0 -10zm-6 -11l40 0 0 10 -40 0 0 -10zm198 -35l-21 0c-2,0 -4,4 -4,9l0 23 29 0 0 -23c0,-5 -2,-9 -4,-9zm-19 46l-6 0 0 10 6 0 0 -10zm23 0l-6 0 0 10 6 0 0 -10zm5 -11l-39 0 0 10 39 0 0 -10zm-90 100l21 0c2,0 3,2 3,6l0 18c-3,-4 -8,-6 -13,-6 -6,0 -10,2 -14,6l0 -18c0,-4 1,-6 3,-6zm11 45l-21 0c0,-13 9,-23 21,-23 11,0 20,10 20,23l-20 0zm-48 0l-21 0c0,-13 10,-23 21,-23 12,0 21,10 21,23l-21 0z"'
//                 "/>",
//                 //Eye and Mouth
//                 "<g id="
//                 '"_2396597567360"'
//                 ">",
//                 " <circle fill='"
//                 ,
//                 properties.eyeMouthColor,"' cx="
//                 '"112"'
//                 " cy="
//                 '"50"'
//                 " r="
//                 '"6"'
//                 "/>",
//                 "<circle  fill='"
//                 ,
//                 properties.eyeMouthColor,"' cx="
//                 '"148"'
//                 " cy="
//                 '"50"'
//                 " r="
//             '"6"'
//                 "/>",
//                 " <path stroke-width="
//                 "',2.45086,'"
//                 " fill="
//                 '"none"'
//                 " stroke='"
//                 ,
//                 properties.eyeMouthColor,"' d="
//                 '"M116 75c2,-6 8,-10 14,-10 6,0 11,4 14,10"'
//                 "/>",
//                 "</g>",
//                 // Arm and Leg
//                 "<path fill='"
//                 ,
//                 properties.armLegColor,"' d="
//                 '"M221 157l0 0c0,-20 -13,-35 -28,-35 0,6 0,0 0,17 7,0 14,8 14,18l0 0 14 0zm-77 65l19 0 0 67 -19 0 0 -67zm-47 0l18 0 0 67 -18 0 0 -67zm-59 -65l0 0c0,-20 13,-35 29,-35 0,6 0,0 0,17 -8,0 -15,8 -15,18l0 0 -14 0z"'
//                 "/>",
//                 //Battery
//                 "<path fill="
//                 '"#E31E24"'
//                 " d="
//                 '"M88 174c14,4 24,4 42,0 10,-2 28,-1 42,0 0,1 0,3 0,4 0,1 0,2 0,4 -14,0 -28,0 -42,0 -14,0 -28,0 -42,0 0,-2 0,-3 0,-4 0,-1 0,-3 0,-4z"'
//                 "/>"
//             );
//         }

//         return render;
//     }

//     function generateSVGofTokenById(uint16 id)
//         public
//         view
//         returns (string memory)
//     {
//         string memory svg = string.concat(
//             "<svg xmlns="
//             '"http://www.w3.org/2000/svg"'
//             " xml:space="
//             '"preserve"'
//             " width="
//             '"200px"'
//             " height="
//             '"258px"'
//             " version="
//             '"1.1"'
//             " style="
// '"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"'
//             " viewBox="
//             '"0 0 300 388"'
//             " xmlns:xlink="
//             '"http://www.w3.org/1999/xlink"'
//             ">",
//             renderTokenById(id),
//             "</svg>"
//         );
//         return svg;
//     }

//     function tokenURI(uint256 id)
//         public
//         view
//         override
//         returns (string memory)
//     {
//         require(_exists(id), "!exist");

//         RobotProperties memory properites = getPropertiesById(uint16(id));

//         if (isHappy[uint16(id)]) {
//             return
//                 string.concat(
//                     "data:application/json;base64,",
//                     Base64.encode(
//                         bytes(
//                             string.concat(
//                                 '{"name":"',
//                                 string.concat("ROBO Matic #", id.toString()),
//                                 '","description":"',
//                                 string.concat(
//                                     "This Robot Powered up and ready to rumble "
                                   
//                                 ),
//                                 '","attributes":[{"trait_type":Head Color","value":"',
//                                 properites.headColor,
//                                 '"},{"trait_type":"Eyes and Mouth Color","value":"',
//                                 properites.eyeMouthColor,
//                                 '"},{"trait_type":"Hands and Foot Color","value":"',
//                                 properites.handFootandBodyColor,
//                                 '"},{"trait_type":"Body Color","value":"',
//                                 properites.handFootandBodyColor,
//                                 '"},{"trait_type":"Legs Color","value":"',
//                                 properites.armLegColor,
//                                 '"},{"trait_type":"Happy","value":"Yes',
//                                 '"}],"owner":"',
//                                 (uint160(ownerOf(id))).toHexString(20),
//                                 '","image": "',
//                                 "data:image/svg+xml;base64,",
//                                 Base64.encode(
//                                     bytes(generateSVGofTokenById(uint16(id)))
//                                 ),
//                                 '"}'
//                             )
//                         )
//                     )
//                 );
//         } else {
//             return
//                 string.concat(
//                     "data:application/json;base64,",
//                     Base64.encode(
//                         bytes(
//                             string.concat(
//                                 '{"name":"',
//                                 string.concat("ROBO Matic #", id.toString()),
//                                 '","description":"',
//                                 string.concat(
//                                     "This Robot is down and needs power to up"
//                                 ),
//                                 '","attributes":[{"trait_type":Head Color","value":"',
//                                 properites.headColor,
//                                 '"},{"trait_type":"Eyes and Mouth Color","value":"',
//                                 properites.eyeMouthColor,
//                                 '"},{"trait_type":"Hands and Foot Color","value":"',
//                                 properites.handFootandBodyColor,
//                                 '"},{"trait_type":"Body Color","value":"',
//                                 properites.handFootandBodyColor,
//                                 '"},{"trait_type":"Legs Color","value":"',
//                                 properites.armLegColor,
//                                 '"},{"trait_type":"Happy","value":"No',
//                                 '"}]',
//                                 ',"image": "',
//                                 "data:image/svg+xml;base64,",
//                                 Base64.encode(
//                                     bytes(generateSVGofTokenById(uint16(id)))
//                                 ),
//                                 '"}'
//                             )
//                         )
//                     )
//                 );
//         }
//     }
// }
